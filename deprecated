notify = (res, callback) => {
  //notify is called any time sql is called
  if (!method) {
    try {
      callback(res);
    } catch (e) {}
  }
  if (method == "update") {
    try {
      //alert()
      console.log("update called");
      callback(res);
      // mem.res=res;
    } catch (e) {}
  }
  if (method == "when") {
    console.log(res);
    mem.res = res;
    try {
      callback(res);
    } catch (e) {}
  }
  if (method == "get") {
    try {
      callback(res);
    } catch (e) {}
    mem.res = res;
  }

  if (method == "ask2") {
    mem.res.dir = res;

    method = null; //nullificate method, so it's not checked next sql request

    console.log(mem.res);
    let DATA = JSON.parse(mem.res.obj.DATA);
    let SPEC = JSON.parse(mem.res.obj.SPEC);
    let index = mem.linker(SPEC); //calculate links, meaning what field is asked and which field is considered as answer
    //index looks like this [n,m], where n and m are numbers from 0 to N,M (integers)
    //n -> answer field
    //m -> question field, this needs to be taken from structure table by sql query
    // [DIR] n [data] ---> m [type]
    //example: [FRENCH] un renard -> [translation] would be [1,3] as linker

    //console.log("INDEX: " + index)
    console.log(index);
    let question = DATA[index[0]];
    mem.res.question = question;
    console.log("Question: " + question);
    let dirData = JSON.parse(mem.res.dir.DATA);
    //console.log(requestedFieldName)
    let reqFieldName = dirData[1][index[1] - 1];
    mem.res.reqFieldName = reqFieldName;
    console.log("REQ:", reqFieldName);
    let rightAnswer;
    let answerIsCorrect;
    if (answer) {
      console.log("DATA");
      console.log(DATA[index[1]]);
      try {
        rightAnswer = DATA[index[1]];
        answerIsCorrect = answer.toLowerCase() == rightAnswer.toLowerCase();
      } catch (e) {
        rightAnswer = DATA[index[1]];
        console.log("ARRAY DETECTED");
        rightAnswer = rightAnswer.map(function (e) {
          return e.toLowerCase();
        });

        /*
         const lower = arr.map(element => {
         return element.toLowerCase();
         });
         */

        answer = answer.toLowerCase();
        answerIsCorrect = rightAnswer.indexOf(answer) > -1 ? true : false;
      }
    }
    mem.res.rightAnswer = rightAnswer;
    try {
      callback(mem);
    } catch (e) {}

    //console.log("Right answer: " + rightAnswer)
    if (answer) {
      //if there's any answer provided, then check, else just show question

      if (answerIsCorrect) {
        console.log("OK");
        mem.code = 1; //code OK
        console.log(rightAnswer.indexOf(answer) > -1 ? true : false);
        console.log(rightAnswer);
        console.log(answer);
        console.log(mem.res);
        console.log(mem.res.obj.LREPEAT);

        let diff = Date.now() - mem.res.obj.LREPEAT * 1;
        console.log("Different in hours: " + diff / 1000 / 60 / 60);

        diff = 2 * diff + Date.now();
        console.log("New RDATE: " + new Date(diff));
        mem.update("RDATE", diff, "ID", mem.res.obj.ID);

        SPEC = JSON.stringify(SPEC);
        mem.update("SPEC", SPEC, "ID", mem.res.obj.ID);

        //mem.get(res.ID)
        check.clear();

        function inner() {
          //alert()
          //check.next(mem.code)
        }
      } else {
        check.wrong();
        console.log(rightAnswer.indexOf(answer) > -1 ? true : false);
        console.log(rightAnswer);
        console.log(answer);
        console.log("BAD");
      }
      ask = null;

      answer = null;
    }

    if (mem.code != 0) {
      check.right();
      setTimeout(check.next, 200, mem.code);

      //check.next(mem.code);
      mem.code = 0;
    }
  }
  if (method == "ask") {
    mem.code = 0;
    console.log("ASK");

    if (res) {
      mem.nothing = 0;
      //res is argument given for notify by sql as a result
      console.log("RES:");
      console.log(res);

      if (!mem.res) {
        mem.res = {};
      }
      alert();
      mem.res.obj = res;

      if (mem.res) {
        check.justStarted = 0;
      }
      console.log(mem.res.obj);

      mem.check2(res, callback);
    } else {
      mem.nothing = 1;
      console.error("No objects to repeat");
      console.log(mem.res);
      console.log("No objects to repeat");
      method = null;

      if (check.justStarted == 0) {
        check.next(-1);
      } else {
        check.justStarted = 0;
      }

      try {
        callback();
      } catch (e) {}
    }
  }

  return res;
};

let answer = null;
